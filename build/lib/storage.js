// Generated by IcedCoffeeScript 108.0.12
(function() {
  var Redis, e, iced, leveldb, r, storage, stream, _, __iced_deferrals, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  if (!module.parent) {
    global.CONFIG = (require('dotenv').config({
      path: __dirname + '/../../config'
    })).parsed;
  }

  _ = require('wegweg')({
    globals: true,
    shelljs: true
  });

  Redis = require('ioredis');

  leveldb = require('level');

  module.exports = storage = {
    leveldb: leveldb(CONFIG.LEVELDB_FILENAME, {}),
    redis: new Redis(CONFIG.REDIS_URI)
  };

  module.exports = storage;

  if (!module.parent) {
    log(/testing leveldb/);
    log(/storing key/);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          filename: "/home/taky/www/blockchain/src/lib/storage.iced"
        });
        storage.leveldb.put('test-key', JSON.stringify({
          value: true
        }), __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return r = arguments[1];
            };
          })(),
          lineno: 28
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          throw e;
        }
        log(/stored key/);
        log(/getting key/);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            filename: "/home/taky/www/blockchain/src/lib/storage.iced"
          });
          storage.leveldb.get('test-key', __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                e = arguments[0];
                return r = arguments[1];
              };
            })(),
            lineno: 34
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (e) {
            throw e;
          }
          log(/got key/, r);
          stream = storage.leveldb.createReadStream({
            keys: true,
            values: true
          });
          stream.on('data', function(d) {
            return log(/got data/, d);
          });
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              filename: "/home/taky/www/blockchain/src/lib/storage.iced"
            });
            stream.on('end', __iced_deferrals.defer({
              lineno: 47
            }));
            __iced_deferrals._fulfill();
          })(function() {
            log(/clearing leveldb/);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                filename: "/home/taky/www/blockchain/src/lib/storage.iced"
              });
              storage.leveldb.clear(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return e = arguments[0];
                  };
                })(),
                lineno: 51
              }));
              __iced_deferrals._fulfill();
            })(function() {
              if (e) {
                throw e;
              }
              log(/finished iterating leveldb/);
              return __iced_k(exit(0));
            });
          });
        });
      };
    })(this));
  } else {
    __iced_k();
  }

}).call(this);
