// Generated by IcedCoffeeScript 108.0.12
(function() {
  var Block, GENESIS, blockchain, e, hash, iced, next_block, _, __iced_deferrals, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  if (!module.parent) {
    global.CONFIG = (require('dotenv').config({
      path: __dirname + '/../../config'
    })).parsed;
  }

  _ = require('wegweg')({
    globals: true,
    shelljs: true
  });

  Block = require('./block');

  hash = require('./hash');

  GENESIS = {
    index: 0,
    ctime: 1517012327,
    hash: hash.auto(env.GENESIS_HASH_STRING),
    data: env.GENESIS_HASH_STRING
  };

  blockchain = {
    blocks: [new Block(GENESIS)],
    balances: {}
  };

  blockchain.get_blockchain = (function(cb) {
    return cb(null, this.blocks);
  });

  blockchain.get_balances = (function(cb) {
    return cb(null, this.balances);
  });

  blockchain.get_balance = (function(pub, cb) {
    var _ref;
    return cb(null, (_ref = this.balances[pub]) != null ? _ref : null);
  });

  blockchain.set_blockchain = (function(chain, cb) {
    var balances, e, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    this.blocks = chain;
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
        });
        _this.calculate_balances(chain, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return balances = arguments[1];
            };
          })(),
          lineno: 47
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          return cb(e);
        }
        _this.balances = balances;
        log('Replaced my chain with a new one', chain.length);
        require('./peers').broadcast_last_block();
        return cb(null, true);
      };
    })(this));
  });

  blockchain.get_block = (function(index_or_hash, cb) {
    var block;
    if (!(block = _.find(this.blocks, {
      index: +index_or_hash
    }))) {
      block = _.find(this.blocks, {
        hash: index_or_hash
      });
    }
    return cb(null, block);
  });

  blockchain.get_last_block = (function(cb) {
    return cb(null, _.last(this.blocks));
  });

  blockchain.add_block = (function(block, cb) {
    var balances, e, new_block, valid, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
        });
        _this.is_valid_next_block(block, null, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return valid = arguments[1];
            };
          })(),
          lineno: 70
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          return cb(e);
        }
        if (!valid) {
          return cb(new Error('Block is invalid'));
        }
        new_block = new Block(block);
        _this.blocks.push(new_block);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
          });
          _this.calculate_balances(_this.blocks, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                e = arguments[0];
                return balances = arguments[1];
              };
            })(),
            lineno: 79
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (e) {
            return cb(e);
          }
          _this.balances = balances;
          log('Added a new block', new_block);
          require('./peers').broadcast_last_block();
          return cb(null, true);
        });
      };
    })(this));
  });

  blockchain.replace_chain = (function(new_chain, cb) {
    var e, our_weight, their_weight, valid, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
        });
        _this.is_valid_chain(new_chain, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return valid = arguments[1];
            };
          })(),
          lineno: 91
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          return cb(e);
        }
        if (!valid) {
          return cb(new Error('Received an invalid chain, refusing to `replace_chain`'));
        }
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
          });
          blockchain.calculate_difficulty_weight(null, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                e = arguments[0];
                return our_weight = arguments[1];
              };
            })(),
            lineno: 98
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (e) {
            return cb(e);
          }
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
            });
            blockchain.calculate_difficulty_weight(new_chain, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  e = arguments[0];
                  return their_weight = arguments[1];
                };
              })(),
              lineno: 101
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (e) {
              return cb(e);
            }
            (function(__iced_k) {
              if (their_weight > our_weight) {
                log('Replacing our blockchain with a larger chain');
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
                  });
                  _this.set_blockchain(new_chain, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return e = arguments[0];
                      };
                    })(),
                    lineno: 107
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  if (e) {
                    return cb(e);
                  }
                  return __iced_k();
                });
              } else {
                return __iced_k();
              }
            })(function() {
              return cb(null, true);
            });
          });
        });
      };
    })(this));
  });

  blockchain.is_valid_next_block = (function(block, prev_block, cb) {
    var binary, calced_hash, calculated_hash_difficulty, difficulty, e, transaction, transactions, txns, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (!Block.is_valid_schema(block)) {
      log(new Error('Invalid block (schema)'));
      return cb(null, false);
    }
    binary = hash._hex_to_binary(block.hash);
    calculated_hash_difficulty = (function(_this) {
      return function() {
        var i, item, _i, _len, _ref;
        i = 0;
        _ref = binary.split('');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item === '0' || item === 0) {
            i += 1;
            continue;
          }
          break;
        }
        return i;
      };
    })(this)();
    if (block.difficulty > calculated_hash_difficulty) {
      log(new Error('Invalid block (`difficulty` is greater than calculated hash difficulty)'));
    }
    (function(_this) {
      return (function(__iced_k) {
        if (!prev_block) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
            });
            _this.get_last_block(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  e = arguments[0];
                  return prev_block = arguments[1];
                };
              })(),
              lineno: 135
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (e) {
              return cb(e);
            }
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
              });
              _this.get_difficulty(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    e = arguments[0];
                    return difficulty = arguments[1];
                  };
                })(),
                lineno: 139
              }));
              __iced_deferrals._fulfill();
            })(function() {
              if (e) {
                return cb(e);
              }
              if (block.difficulty !== difficulty) {
                log(new Error('Invalid block (`difficulty`)'));
                return cb(null, false);
              }
              return __iced_k();
            });
          });
        } else {
          return __iced_k();
        }
      });
    })(this)((function(_this) {
      return function() {
        if (block.index !== (prev_block.index + 1)) {
          log(new Error('Invalid block (`index`)'));
          return cb(null, false);
        }
        if (block.prev !== prev_block.hash) {
          log(new Error('Invalid block (`prev`)'));
          return cb(null, false);
        }
        if (block.hash !== (calced_hash = Block.calculate_hash(block))) {
          log(new Error('Invalid block (`hash`)'));
          return cb(null, false);
        }
        if (!Block.is_valid_proof(block)) {
          log(new Error('Invalid block (`proof`)'));
          return cb(null, false);
        }
        if (block.ctime < (prev_block.ctime - 60)) {
          log(new Error('Invalid block (`ctime` before previous block)'));
          return cb(null, false);
        }
        if (block.ctime > (_.time() + 60)) {
          log(new Error('Invalid block (`ctime` too far in the future)'));
          return cb(null, false);
        }
        txns = require(__dirname + '/transactions');
        (function(__iced_k) {
          var _ref, _ref1;
          if ((_ref = (transactions = (_ref1 = block.data) != null ? _ref1.transactions : void 0)) != null ? _ref.length : void 0) {
            (function(__iced_k) {
              var _i, _len, _ref2, _results, _while;
              _ref2 = transactions;
              _len = _ref2.length;
              _i = 0;
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = __iced_k;
                _continue = function() {
                  return iced.trampoline(function() {
                    ++_i;
                    return _while(__iced_k);
                  });
                };
                _next = _continue;
                if (!(_i < _len)) {
                  return _break();
                } else {
                  transaction = _ref2[_i];
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
                    });
                    txns.validate(transaction, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return e = arguments[0];
                        };
                      })(),
                      lineno: 179
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    if (e) {
                      return cb(e);
                    }
                    return _next();
                  });
                }
              };
              _while(__iced_k);
            })(__iced_k);
          } else {
            return __iced_k();
          }
        })(function() {
          return cb(null, true);
        });
      };
    })(this));
  });

  blockchain.is_valid_chain = (function(chain, cb) {
    var block, chain_genesis, e, i, key, valid, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _len, _ref;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    chain_genesis = chain[0];
    _ref = ['index', 'hash', 'ctime'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      if (chain_genesis[key] !== GENESIS[key]) {
        log(new Error('Invalid genesis block'));
        return cb(null, false);
      }
    }
    i = 0;
    (function(_this) {
      return (function(__iced_k) {
        var _j, _len1, _ref1, _results, _while;
        _ref1 = chain;
        _len1 = _ref1.length;
        _j = 0;
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = __iced_k;
          _continue = function() {
            return iced.trampoline(function() {
              ++_j;
              return _while(__iced_k);
            });
          };
          _next = _continue;
          if (!(_j < _len1)) {
            return _break();
          } else {
            block = _ref1[_j];
            (function(__iced_k) {
              if (i === 0) {
                i += 1;
                (function(__iced_k) {
_continue()
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
                });
                _this.is_valid_next_block(block, chain[i - 1], __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      e = arguments[0];
                      return valid = arguments[1];
                    };
                  })(),
                  lineno: 203
                }));
                __iced_deferrals._fulfill();
              })(function() {
                if (e) {
                  return cb(e);
                }
                if (!valid) {
                  log(new Error('Invalid block in chain', block.index));
                  return cb(null, false);
                } else {
                  i += 1;
                }
                return _next();
              });
            });
          }
        };
        _while(__iced_k);
      });
    })(this)((function(_this) {
      return function() {
        return cb(null, true);
      };
    })(this));
  });

  blockchain.generate_next_block = (function(data, solver, cb) {
    var block, block_base, difficulty, e, last, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (!cb && _.type(solver) === 'function') {
      cb = solver;
      solver = null;
    }
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
        });
        _this.get_last_block(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return last = arguments[1];
            };
          })(),
          lineno: 221
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          return cb(e);
        }
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
          });
          _this.get_difficulty(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                e = arguments[0];
                return difficulty = arguments[1];
              };
            })(),
            lineno: 224
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (e) {
            return cb(e);
          }
          block_base = {
            index: last.index + 1,
            ctime: _.time(),
            prev: last.hash,
            difficulty: difficulty,
            solver: solver,
            data: data
          };
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
            });
            blockchain.mine_block(block_base, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  e = arguments[0];
                  return block = arguments[1];
                };
              })(),
              lineno: 236
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (e) {
              return cb(e);
            }
            return cb(null, block);
          });
        });
      };
    })(this));
  });

  blockchain.mine_block = (function(block, cb) {
    if (block.proof == null) {
      block.proof = 0;
    }
    block.hash = Block.calculate_hash(block);
    while (1) {
      block.hash = Block.calculate_hash(block);
      if (Block.is_valid_proof(block)) {
        return cb(null, block);
      } else {
        block.proof += 1;
      }
    }
    return cb(null, false);
  });

  blockchain.get_difficulty = (function(cb) {
    var difficulty, e, last, last_adjustment_block, last_adjustment_index, secs_elapsed, secs_expected, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
        });
        _this.get_last_block(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return last = arguments[1];
            };
          })(),
          lineno: 258
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        var _ref;
        if (e) {
          return cb(e);
        }
        difficulty = +((_ref = last.difficulty) != null ? _ref : env.DIFFICULTY_LEVEL_START);
        (function(__iced_k) {
          if ((last.index % env.DIFFICULTY_INCREASE_INTERVAL_BLOCKS === 0) && last.index !== 0) {
            last_adjustment_index = last.index + 1 - (+env.DIFFICULTY_INCREASE_INTERVAL_BLOCKS);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
              });
              _this.get_block(last_adjustment_index, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    e = arguments[0];
                    return last_adjustment_block = arguments[1];
                  };
                })(),
                lineno: 267
              }));
              __iced_deferrals._fulfill();
            })(function() {
              if (e) {
                return cb(e);
              }
              if (!last_adjustment_block) {
                return cb(null, difficulty);
              }
              difficulty = last_adjustment_block.difficulty;
              secs_expected = +env.DIFFICULTY_INCREASE_INTERVAL_BLOCKS * +env.DIFFICULTY_SOLVE_INTERVAL_SECS;
              secs_elapsed = last.ctime - last_adjustment_block.ctime;
              return __iced_k(secs_elapsed < (secs_expected / 2) ? difficulty += 1 : secs_elapsed > (secs_expected * 2) ? difficulty -= 1 : void 0);
            });
          } else {
            return __iced_k();
          }
        })(function() {
          return cb(null, difficulty);
        });
      };
    })(this));
  });

  blockchain.calculate_difficulty_weight = (function(blocks, cb) {
    var block, e, weight, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (blocks == null) {
      blocks = null;
    }
    (function(_this) {
      return (function(__iced_k) {
        if (!blocks) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
            });
            _this.get_blockchain(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  e = arguments[0];
                  return blocks = arguments[1];
                };
              })(),
              lineno: 290
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (e) {
              return cb(e);
            }
            return __iced_k();
          });
        } else {
          return __iced_k();
        }
      });
    })(this)((function(_this) {
      return function() {
        var _i, _len, _ref;
        weight = 0;
        for (_i = 0, _len = blocks.length; _i < _len; _i++) {
          block = blocks[_i];
          weight += Math.pow(2, (_ref = block.difficulty) != null ? _ref : 0);
        }
        return cb(null, weight);
      };
    })(this));
  });

  blockchain.calculate_balances = (function(blocks, cb) {
    var balances, block, e, output, total_out, transaction, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (blocks == null) {
      blocks = null;
    }
    (function(_this) {
      return (function(__iced_k) {
        if (!blocks) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
            });
            _this.get_blockchain(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  e = arguments[0];
                  return blocks = arguments[1];
                };
              })(),
              lineno: 304
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (e) {
              return cb(e);
            }
            return __iced_k();
          });
        } else {
          return __iced_k();
        }
      });
    })(this)((function(_this) {
      return function() {
        var _i, _j, _k, _len, _len1, _len2, _name, _name1, _name2, _ref, _ref1, _ref2, _ref3;
        balances = {};
        for (_i = 0, _len = blocks.length; _i < _len; _i++) {
          block = blocks[_i];
          if ((_ref = block.data) != null ? (_ref1 = _ref.transactions) != null ? _ref1.length : void 0 : void 0) {
            _ref2 = block.data.transactions;
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              transaction = _ref2[_j];
              total_out = 0;
              _ref3 = transaction.outputs;
              for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
                output = _ref3[_k];
                if (balances[_name = output.to] == null) {
                  balances[_name] = {
                    last_input_block: null,
                    last_output_block: null,
                    amount: 0
                  };
                }
                balances[output.to].last_input_block = block.index;
                balances[output.to].amount += output.amount;
                total_out += output.amount;
              }
              if (balances[_name1 = transaction.from] == null) {
                balances[_name1] = {
                  last_input_block: null,
                  last_output_block: null,
                  amount: 0
                };
              }
              balances[transaction.from].last_output_block = block.index;
              balances[transaction.from].amount -= total_out;
            }
          }
          if (block.solver) {
            if (balances[_name2 = block.solver] == null) {
              balances[_name2] = {
                last_input_block: null,
                last_output_block: null,
                amount: 0
              };
            }
            balances[block.solver].last_input_block = block.index;
            balances[block.solver].amount += +CONFIG.BLOCK_REWARD;
          }
        }
        return cb(null, balances);
      };
    })(this));
  });

  module.exports = blockchain;

  if (!module.parent) {
    log(/TEST/);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          filename: "/home/taky/www/blockchain/src/lib/blockchain.iced"
        });
        blockchain.generate_next_block('Hello', __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return next_block = arguments[1];
            };
          })(),
          lineno: 359
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          throw e;
        }
        log(/next_block/, next_block);
        return __iced_k(exit(0));
      };
    })(this));
  } else {
    __iced_k();
  }

}).call(this);
