// Generated by IcedCoffeeScript 108.0.11
(function() {
  var app, blockchain, iced, peers, _, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  _ = require('wegweg')({
    globals: true
  });

  blockchain = require('./blockchain');

  peers = require('./peers');

  app = _.app();

  app.get('/', (function(req, res, next) {
    var block, e, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/tky/www/blockchain/src/lib/server-http.iced"
        });
        blockchain.get_last_block(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return block = arguments[1];
            };
          })(),
          lineno: 10
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          return next(e);
        }
        return res.json({
          height: block.index,
          last_block: block,
          uptime: Math.round((new Date - PROCESS_STARTED) / 1000)
        });
      };
    })(this));
  }));

  app.get('/blocks', (function(req, res, next) {
    var chain, e, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/tky/www/blockchain/src/lib/server-http.iced"
        });
        blockchain.get_blockchain(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return chain = arguments[1];
            };
          })(),
          lineno: 22
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          return next(e);
        }
        return res.json(chain);
      };
    })(this));
  }));

  app.get('/blocks/:index_or_hash', (function(req, res, next) {
    var block, e, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/tky/www/blockchain/src/lib/server-http.iced"
        });
        blockchain.get_block(req.params.index_or_hash, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return block = arguments[1];
            };
          })(),
          lineno: 29
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          return next(e);
        }
        if (!block) {
          return next(new Error('Block not found', req.query.q));
        }
        return res.json(block);
      };
    })(this));
  }));

  app.get('/blocks-mine', (function(req, res, next) {
    var e, next_block, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/tky/www/blockchain/src/lib/server-http.iced"
        });
        blockchain.generate_next_block({
          test: 1
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return next_block = arguments[1];
            };
          })(),
          lineno: 39
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          return next(e);
        }
        return res.json(next_block);
      };
    })(this));
  }));

  app.get('/peers', (function(req, res, next) {
    return res.json(true);
  }));

  app.get('/peers-add', (function(req, res, next) {
    peers.connect(req.query.ip);
    return res.json(true);
  }));

  app.get('/dev/incr', (function(req, res, next) {
    var e, next_block, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/tky/www/blockchain/src/lib/server-http.iced"
        });
        blockchain.generate_next_block({
          test: 1
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return next_block = arguments[1];
            };
          })(),
          lineno: 57
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          return next(e);
        }
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/tky/www/blockchain/src/lib/server-http.iced"
          });
          blockchain.add_block(next_block, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return e = arguments[0];
              };
            })(),
            lineno: 60
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (e) {
            return next(e);
          }
          return res.json(next_block);
        });
      };
    })(this));
  }));

  module.exports = app;

}).call(this);
