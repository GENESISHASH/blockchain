// Generated by IcedCoffeeScript 108.0.12
(function() {
  var addresses, app, blockchain, iced, mempool, peers, transactions, _, __iced_k, __iced_k_noop,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  _ = require('wegweg')({
    globals: true,
    shelljs: true
  });

  addresses = require('./addresses');

  blockchain = require('./blockchain');

  transactions = require('./transactions');

  mempool = require('./mempool');

  peers = require('./peers');

  app = _.app();

  app.use((function(req, res, next) {
    var body, method, valid_methods;
    valid_methods = ['post', 'delete'];
    if (req.method === 'GET' && req.query.method) {
      method = req.query.method.toLowerCase().trim();
      if (__indexOf.call(valid_methods, method) < 0) {
        return next();
      }
      req.method = method.toUpperCase().trim();
      if (method === 'post') {
        body = _.clone(req.query);
        try {
          delete body.method;
        } catch (_error) {}
        req.query = {};
        req.body = body;
      }
    }
    return next();
  }));

  app.get('/', (function(req, res, next) {
    var block, e, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/taky/www/blockchain/src/lib/rest.iced"
        });
        blockchain.get_last_block(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return block = arguments[1];
            };
          })(),
          lineno: 37
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          return next(e);
        }
        return res.json({
          height: block.index,
          difficulty: block.difficulty,
          mempool_size: mempool.items.length,
          last_block: block
        });
      };
    })(this));
  }));

  app.get('/mempool', (function(req, res, next) {
    return res.json(mempool.items);
  }));

  app.get('/blocks', (function(req, res, next) {
    var chain, e, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/taky/www/blockchain/src/lib/rest.iced"
        });
        blockchain.get_blockchain(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return chain = arguments[1];
            };
          })(),
          lineno: 55
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          return next(e);
        }
        return res.json(chain);
      };
    })(this));
  }));

  app.get('/blocks/:index_or_hash', (function(req, res, next) {
    var block, e, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/taky/www/blockchain/src/lib/rest.iced"
        });
        blockchain.get_block(req.params.index_or_hash, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return block = arguments[1];
            };
          })(),
          lineno: 63
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          return next(e);
        }
        if (!block) {
          return next(new Error('Block not found', req.query.q));
        }
        return res.json(block);
      };
    })(this));
  }));

  app.get('/wallets', (function(req, res, next) {
    var balances, e, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/taky/www/blockchain/src/lib/rest.iced"
        });
        blockchain.get_balances(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return balances = arguments[1];
            };
          })(),
          lineno: 74
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          return next(e);
        }
        return res.json(balances);
      };
    })(this));
  }));

  app.get('/wallets/:address', (function(req, res, next) {
    var balance, e, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/taky/www/blockchain/src/lib/rest.iced"
        });
        blockchain.get_balance(req.params.address, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return balance = arguments[1];
            };
          })(),
          lineno: 82
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          return next(e);
        }
        return res.json(balance);
      };
    })(this));
  }));

  app.post('/wallets', (function(req, res, next) {
    var _ref;
    return res.json(addresses.generate((_ref = req.body.priv) != null ? _ref : null));
  }));

  app.get('/transactions/:hash', (function(req, res, next) {
    return next(new Error('@todo'));
  }));

  app.post('/transactions', (function(req, res, next) {
    var e, txn, valid, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/taky/www/blockchain/src/lib/rest.iced"
        });
        transactions.create(req.body, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return txn = arguments[1];
            };
          })(),
          lineno: 100
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          return next(e);
        }
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/taky/www/blockchain/src/lib/rest.iced"
          });
          transactions.broadcast(txn, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                e = arguments[0];
                return valid = arguments[1];
              };
            })(),
            lineno: 103
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (e) {
            return next(e);
          }
          return res.json(true);
        });
      };
    })(this));
  }));

  app.get('/peers', (function(req, res, next) {
    return res.json(true);
  }));

  app.post('/peers', (function(req, res, next) {
    peers.connect(req.body.ip);
    return res.json(true);
  }));

  app.get('/_/mine', (function(req, res, next) {
    var block_data, e, from, from_key, next_block, solver, test_addrs, to, to_key, transaction, txn_opt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    addresses = require(__dirname + '/addresses');
    solver = _.first(_.shuffle(_.keys(addresses.TEST_ADDRESSES)));
    solver = addresses.TEST_ADDRESSES[solver];
    block_data = {
      test: 1
    };
    (function(_this) {
      return (function(__iced_k) {
        var _ref;
        if (req.query.txn_test) {
          test_addrs = _.shuffle(_.keys(addresses.TEST_ADDRESSES));
          from_key = test_addrs.pop();
          from = addresses.TEST_ADDRESSES[from_key];
          to_key = test_addrs.pop();
          to = addresses.TEST_ADDRESSES[to_key];
          txn_opt = {
            from: from.pub,
            priv: from.priv,
            outputs: [
              {
                to: to.pub,
                amount: +((_ref = req.query.amount) != null ? _ref : 1)
              }
            ]
          };
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/taky/www/blockchain/src/lib/rest.iced"
            });
            transactions.create(txn_opt, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  e = arguments[0];
                  return transaction = arguments[1];
                };
              })(),
              lineno: 149
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k(block_data = {
              transactions: [transaction]
            });
          });
        } else {
          return __iced_k();
        }
      });
    })(this)((function(_this) {
      return function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/taky/www/blockchain/src/lib/rest.iced"
          });
          blockchain.generate_next_block(block_data, solver.pub, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                e = arguments[0];
                return next_block = arguments[1];
              };
            })(),
            lineno: 155
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (e) {
            return next(e);
          }
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/taky/www/blockchain/src/lib/rest.iced"
            });
            blockchain.add_block(next_block, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return e = arguments[0];
                };
              })(),
              lineno: 158
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (e) {
              return next(e);
            }
            return res.json(next_block);
          });
        });
      };
    })(this));
  }));

  module.exports = app;

}).call(this);
