// Generated by IcedCoffeeScript 108.0.12
(function() {
  var ATTEMPTS, BASE_URL, HEARTBEAT_WORKING, LAST_BLOCK, NODE_METADATA, chalk, help, iced, inquirer, mine, spinner, _, __iced_k, __iced_k_noop, _gather_block, _heartbeat,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  global.CONFIG = (require('dotenv').config({
    path: __dirname + '/../config'
  })).parsed;

  _ = require('wegweg')({
    globals: true,
    shelljs: true
  });

  inquirer = require('inquirer');

  chalk = require('chalk');

  spinner = require('ora')();

  BASE_URL = _.arg('node') || CONFIG.NODE_REST_URL;

  NODE_METADATA = null;

  LAST_BLOCK = null;

  ATTEMPTS = 0;

  help = (function() {
    return log("Usage: . [options]\nOptions:\n  --solver <address>\t\tSpecify block block reward address\n  --node <url>\t\tSpecify node REST endpoint\n  --easy\t\tPrioritize easy transactions\n  --hard\t\tPrioritize hard transactions");
  });

  mine = (function(opt, cb) {
    var _update_spinner;
    if (opt == null) {
      opt = {};
    }
    _update_spinner = (function() {
      return spinner.start('Mining, attempts=' + ATTEMPTS);
    });
    return _heartbeat(function(e) {
      var block, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          if (e) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/taky/www/blockchain/src/scripts/miner/src/miner.iced"
              });
              setTimeout(__iced_deferrals.defer({
                lineno: 34
              }), 100);
              __iced_deferrals._fulfill();
            })(function() {
              return mine(opt, cb);
              return __iced_k();
            });
          } else {
            return __iced_k(setInterval(_heartbeat, 100));
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            var _while;
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = __iced_k;
              _continue = function() {
                return iced.trampoline(function() {
                  return _while(__iced_k);
                });
              };
              _next = _continue;
              if (!1) {
                return _break();
              } else {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/taky/www/blockchain/src/scripts/miner/src/miner.iced"
                  });
                  _gather_block(opt, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        e = arguments[0];
                        return block = arguments[1];
                      };
                    })(),
                    lineno: 40
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    if (e) {
                      (function(__iced_k) {
_continue()
                      })(__iced_k);
                    } else {
                      return __iced_k();
                    }
                  })(_next);
                });
              }
            };
            _while(__iced_k);
          })(function() {
            return _update_spinner();
          });
        };
      })(this));
    });
  });

  _gather_block = (function(opt, cb) {
    var ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (cb == null) {
      cb = null;
    }
    if (!cb) {
      cb = function() {
        return 1;
      };
    }
    spinner.start('Gathering a block');
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/taky/www/blockchain/src/scripts/miner/src/miner.iced"
        });
        setTimeout(__iced_deferrals.defer({
          lineno: 49
        }), 10);
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        return cb();
      };
    })(this));
  });

  HEARTBEAT_WORKING = false;

  _heartbeat = (function(cb) {
    var b, e, r, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (cb == null) {
      cb = null;
    }
    if (!cb) {
      cb = function() {
        return 1;
      };
    }
    if (HEARTBEAT_WORKING) {
      return cb(new Error('Heartbeat already working'));
    }
    HEARTBEAT_WORKING = true;
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/taky/www/blockchain/src/scripts/miner/src/miner.iced"
        });
        _.get(BASE_URL, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              r = arguments[1];
              return b = arguments[2];
            };
          })(),
          lineno: 61
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        var _ref, _ref1;
        if (e || !(typeof b !== "undefined" && b !== null ? (_ref = b.last_block) != null ? _ref.hash : void 0 : void 0)) {
          HEARTBEAT_WORKING = false;
          return cb(e);
        }
        if ((typeof b !== "undefined" && b !== null ? (_ref1 = b.last_block) != null ? _ref1.hash : void 0 : void 0) !== (LAST_BLOCK != null ? LAST_BLOCK.hash : void 0)) {
          spinner.stopAndPersist({
            symbol: 'ðŸ‘‚',
            text: 'Last block changed'
          });
          log(b.last_block);
          spinner.start();
          NODE_METADATA = b;
          LAST_BLOCK = b.last_block;
        }
        HEARTBEAT_WORKING = false;
        return cb();
      };
    })(this));
  });

  if (_.arg('help')) {
    help();
    exit(0);
  } else {
    spinner.info('Using node ' + BASE_URL);
    mine({}, function() {
      return 1;
    });
  }

}).call(this);
