// Generated by IcedCoffeeScript 108.0.11
(function() {
  var Block, MESSAGES, Websocket, blockchain, handlers, http_server, iced, peers, _, __iced_k, __iced_k_noop,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  _ = require('wegweg')({
    globals: true
  });

  Websocket = require('ws');

  Block = require('./block');

  blockchain = require('./blockchain');

  peers = {
    sockets: [],
    server: (http_server = require('http').createServer())
  };

  peers.MESSAGES = MESSAGES = {
    QUERY_LAST: 0,
    QUERY_ALL: 1,
    RESPONSE_BLOCKS: 2
  };

  peers.send = (function(socket, msg) {
    log('Sending a message to a peer', msg);
    return socket.send(JSON.stringify(msg));
  });

  peers.broadcast = (function(msg) {
    var socket, _i, _len, _ref, _results;
    _ref = peers.sockets;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      socket = _ref[_i];
      _results.push(socket.send(JSON.stringify(msg)));
    }
    return _results;
  });

  peers.broadcast_last_block = (function() {
    var block, e, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    log('peers.broadcast_last_block()');
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/tky/www/blockchain/src/lib/peers.iced"
        });
        blockchain.get_last_block(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return block = arguments[1];
            };
          })(),
          lineno: 34
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (e) {
          throw e;
        }
        return _this.broadcast({
          type: MESSAGES.RESPONSE_BLOCKS,
          data: [block]
        });
      };
    })(this));
  });

  peers.handlers = handlers = {
    connections: (function(socket, req) {
      log('Handling connection');
      peers.sockets.push(socket);
      this.errors(socket);
      this.messages(socket);
      return peers.send(socket, {
        type: MESSAGES.QUERY_LAST
      });
    }),
    messages: (function(socket) {
      return socket.on('message', (function(msg) {
        var block, blocks, e, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        log('Handling message', msg);
        msg = JSON.parse(msg);
        if ((msg != null ? msg.type : void 0) == null) {
          return false;
        }
        if (_ref = msg.type, __indexOf.call(_.vals(MESSAGES), _ref) < 0) {
          return false;
        }
        (function(_this) {
          return (function(__iced_k) {
            switch (msg.type) {
              case MESSAGES.QUERY_LAST:
                log(/QUERY_LAST/);
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/tky/www/blockchain/src/lib/peers.iced"
                  });
                  blockchain.get_last_block(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        e = arguments[0];
                        return block = arguments[1];
                      };
                    })(),
                    lineno: 77
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  if (e) {
                    throw e;
                  }
                  return peers.send(socket, {
                    type: MESSAGES.RESPONSE_BLOCKS,
                    data: [block]
                  });
                  return __iced_k();
                });
                break;
              case MESSAGES.QUERY_ALL:
                log(/QUERY_ALL/);
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/tky/www/blockchain/src/lib/peers.iced"
                  });
                  blockchain.get_blockchain(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        e = arguments[0];
                        return blocks = arguments[1];
                      };
                    })(),
                    lineno: 89
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  if (e) {
                    throw e;
                  }
                  return peers.send(socket, {
                    type: MESSAGES.RESPONSE_BLOCKS,
                    data: blocks
                  });
                  return __iced_k();
                });
                break;
              case MESSAGES.RESPONSE_BLOCKS:
                log(/RESPONSE_BLOCKS/);
                return handlers.incoming_blocks(msg.data);
                return __iced_k();
              default:
                return __iced_k();
            }
          });
        })(this)((function(_this) {
          return function() {
            return false;
          };
        })(this));
      }));
    }),
    errors: (function(socket) {
      var _close;
      _close = (function(x) {
        log('Websocket client closed');
        return peers.sockets.splice(peers.sockets.indexOf(x), 1);
      });
      socket.on('close', function() {
        return _close(socket);
      });
      return socket.on('error', function() {
        return _close(socket);
      });
    }),
    incoming_blocks: (function(incoming_blocks) {
      var block, e, first_incoming_block, last_existing_block, last_incoming_block, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log('Handling incoming blocks from a peer', incoming_blocks.length);
      first_incoming_block = _.first(incoming_blocks);
      last_incoming_block = _.last(incoming_blocks);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/tky/www/blockchain/src/lib/peers.iced"
          });
          blockchain.get_last_block(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                e = arguments[0];
                return last_existing_block = arguments[1];
              };
            })(),
            lineno: 125
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (e) {
            throw e;
          }
          if (last_existing_block.index >= last_incoming_block.index) {
            log('We are current with the incoming chain data', last_existing_block);
            return false;
          }
          log('Incoming chain is longer', last_incoming_block);
          if (last_incoming_block.prev_hash === last_existing_block.hash) {
            log('Adding a new block to chain from a peer', last_incoming_block);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/tky/www/blockchain/src/lib/peers.iced"
              });
              blockchain.add_block(last_incoming_block, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    e = arguments[0];
                    return block = arguments[1];
                  };
                })(),
                lineno: 138
              }));
              __iced_deferrals._fulfill();
            })(function() {
              if (e) {
                throw e;
              }
              return __iced_k();
            });
          } else {
            (function(__iced_k) {
              if ((incoming_blocks != null ? incoming_blocks.length : void 0) === 1) {
                return __iced_k(peers.broadcast({
                  type: MESSAGES.QUERY_ALL
                }));
              } else {
                log('Replacing our outdated chain with incoming one', incoming_blocks.length);
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/tky/www/blockchain/src/lib/peers.iced"
                  });
                  blockchain.replace_chain(incoming_blocks, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return e = arguments[0];
                      };
                    })(),
                    lineno: 152
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  if (e) {
                    throw e;
                  }
                  return __iced_k();
                });
              }
            })(__iced_k);
          }
        };
      })(this));
    })
  };

  peers.ws = new Websocket.Server({
    server: http_server
  });

  peers.ws.on('connection', function() {
    var socket;
    socket = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return handlers.connections.apply(handlers, socket);
  });

  peers.connect = (function(ip) {
    var peer_ws;
    log('Connecting to a peer', ip);
    peer_ws = new Websocket("ws://" + ip);
    peer_ws.on('open', function() {
      return handlers.connections(peer_ws);
    });
    return peer_ws.on('error', function() {
      return null;
    });
  });

  module.exports = peers;

}).call(this);
