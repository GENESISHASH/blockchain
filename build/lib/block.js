// Generated by IcedCoffeeScript 108.0.11
(function() {
  var Block, Schema, b, b2, hash, mongoose, _;

  _ = require('wegweg')({
    globals: true
  });

  mongoose = require('mongoose');

  hash = require('./hash');

  Schema = new mongoose.Schema({
    index: Number,
    ctime: Number,
    hash: String,
    prev_hash: String,
    data: [mongoose.Schema.Types.Mixed]
  }, {
    _id: false
  });

  Schema.path('index').set(function(x) {
    if (this.hash == null) {
      this.hash = hash.sha256([this.index, this.ctime, this.prev_hash, JSON.stringify(this.data)].join(''));
    }
    return x;
  });

  Schema.methods.is_valid_structure = (function() {
    var k, props, v;
    props = {
      index: 'number',
      ctime: 'number',
      hash: 'string',
      prev_hash: 'string',
      data: 'object'
    };
    for (k in props) {
      v = props[k];
      if (!this[k]) {
        return false;
      }
      if (typeof this[k] !== v) {
        return false;
      }
    }
    return true;
  });

  Schema.statics.calculate_hash = (function(block_obj) {
    return hash.sha256([block_obj.index, block_obj.ctime, block_obj.prev_hash, JSON.stringify(block_obj.data)].join(''));
  });

  module.exports = Block = mongoose.model('Block', Schema);

  if (!module.parent) {
    log(/TEST/);
    b = new Block({
      index: 3,
      ctime: 1517012327,
      hash: hash.sha256('helo'),
      prev_hash: 'abc',
      data: []
    });
    log(/valid block/, b);
    log(/is_valid_structure/, b.is_valid_structure());
    b2 = new Block({
      index: 'a'
    });
    log(/invalid block/, b2);
    log(/is_valid_structure/, b.is_valid_structure());
    exit(0);
  }

}).call(this);
